from dotenv import load_dotenv
import dspy
import os
import asyncio
from typing import List, Dict
from agents.pipelines.visualization_pipeline import VisualizationPipeline
from agents.pipelines.analysis_pipeline import AnalysisPipeline
from agents.modules.router import ActionRouter, ACTION_LIST

async def main(prompt: str, conversation_history: List[Dict[str, str]] = None):
    # Load environment variables
    load_dotenv()
    
    if conversation_history is None:
        conversation_history = []
    
    model = "openai/gpt-4o"
    lm = dspy.LM(model=model, api_key=os.getenv("OPENAI_API_KEY"))
    dspy.configure(lm=lm)
    
    # Initialize pipelines
    analysis_pipeline = AnalysisPipeline()
    await analysis_pipeline.initialize()
        
    visualization_pipeline = VisualizationPipeline()
    await visualization_pipeline.initialize() 
    
    # Add available mcp tools in visualization pipeline to the prompt
    prompt = prompt + "\n\nAvailable MCP tools in RETRIEVE_AND_VISUALIZE_INFORMATION: " + ", ".join([tool.name for tool in visualization_pipeline.retriever.tools])
    
    # Initialize router with predict
    router = dspy.Predict(ActionRouter)
    
    # Get route action with required fields
    response = router(
        available_action=ACTION_LIST,
        conversation_history=conversation_history,    
        new_message=prompt
    )
    
    # Get action and parameters from response
    action = response.action
    parameters = response.parameters
    
    print("action: ", action)
    print("parameters: ", parameters)
    
    # Execute action
    if action == "ANALYZE_GRAPH":
        results = await analysis_pipeline.analyze_figures(parameters["img_paths"], prompt, conversation_history)
        results["action"] = action
    elif action == "RETRIEVE_AND_VISUALIZE_INFORMATION":
        results = {"visualization_results_list": []}
        for info_needed in parameters["information_needed"]:
            result = await visualization_pipeline.generate_visualization(info_needed, conversation_history)
            results["visualization_results_list"].append(result)
        results["action"] = action
    else:
        # GENERAL_CHAT
        # return the message generated by the AI
        results = {"message": parameters["message"]}
        results["action"] = action
    return results

if __name__ == "__main__":
    prompts = [
        "Compare the protocol and token profit and loss for this wallet address on Arbitrum mainnet: 0x8a7fd3eb9e41b3dd1b37f853b7a5252c59a782fd",
        # "Hello",
        # "Analyze img_path: 'data/visualization_results/20250405_183413_0xf3be3c8afc0fc1c91d9a365b36cee5bb5acd74f1_get_bal.json.png', analyze how is this portfolio doing?"
    ]
    for prompt in prompts:
        print(f"\n=== Testing prompt: {prompt} ===")
        response = asyncio.run(main(prompt))
        print(f"Response: {response}")
